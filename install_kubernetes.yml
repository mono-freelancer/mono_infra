- hosts: masters
  gather_facts: true
  become: yes
  become_method: sudo

  tasks:

  - name: install Packages
    package:
      name:
      - apt-transport-https
      - ca-certificates
      - rpcbind
      - nfs-common
      - curl
 
  - name: install Docker public signing key
    shell: curl -sSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor --yes -o /usr/share/keyrings/docker-archive-keyring.gpg
 
  - name: Add the Docker apt repository
    lineinfile:
      path: /etc/apt/sources.list.d/docker.list
      line: deb [signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu jammy stable
      create: yes
 
  - name: install Google Cloud public signing key
    get_url:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      dest: /usr/share/keyrings/kubernetes-archive-keyring.gpg
      mode: '0644'
 
  - name: add the Kubernetes apt repository
    lineinfile:
      path: /etc/apt/sources.list.d/kubernetes.list
      line: deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main
      create: yes
 
  - name: install containerd Kubernetes Packages
    apt:
      pkg:
      - docker.io
      - containerd
      - kubelet=1.21.7-00
      - kubeadm=1.21.7-00
      - kubectl=1.21.7-00
      update_cache: yes
 
  - name: hold Kubernetes Packages
    dpkg_selections:
      name: '{{item}}'
      selection: hold
    with_items:
    - kubelet
    - kubeadm
    - kubectl
 
  - name: setting kernel module
    lineinfile:
      path: /etc/modules-load.d/kubernetes.conf
      line: "{{item}}"
      create: yes
    with_items:
    - overlay
    - br_netfilter
 
  - name: load kernel module
    modprobe:
      name: br_netfilter
      state: present
 
  - name: setting sysctl
    lineinfile:
      path: /etc/sysctl.conf
      regexp: '^{{item.regexp}}.*'
      line: '{{item.line}}'
    with_items:
    - regexp: net.ipv4.ip_forward
      line: net.ipv4.ip_forward=1
    - regexp: net.bridge.bridge-nf-call-ip6table
      line: net.bridge.bridge-nf-call-ip6table=1
    - regexp: net.bridge.bridge-nf-call-iptables
      line: net.bridge.bridge-nf-call-iptables=1
    - regexp: fs.inotify.max_user_instances
      line: fs.inotify.max_user_instances=100000
    - regexp: fs.inotify.max_user_watches
      line: fs.inotify.max_user_watches=100000
 
  - name: create containerd config directory
    file:
      path: /etc/containerd
      state: directory
      mode: '0755'
 
  - name: disable swap
    lineinfile:
      path: /etc/fstab
      regexp: '\sswap\s'
      state: absent
 
  - name: create containerd config file
    shell: containerd config default > /etc/containerd/config.toml
 
  - name: setting crictl endpoint
    shell: crictl config --set runtime-endpoint=unix:///run/containerd/containerd.sock --set image-endpoint=unix:///run/containerd/containerd.sock
 
  - name: enable systemd cgroup
    lineinfile:
      path: /etc/containerd/config.toml
      regexp: '{{item.regexp}}'
      line: '{{item.line}}'
      insertafter: '{{item.insertafter}}'
    with_items:
    - regexp: '            SystemdCgroup = false'
      line: '            SystemdCgroup = true'
      insertafter: 'plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options'

  - name: join docker group
    user:
      name: '{{ ansible_env.USER }}'
      groups: docker
      append: yes

#EOF
